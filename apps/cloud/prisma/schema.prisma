// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Project {
  id             String           @id @default(uuid())
  name           String
  description    String?
  configs        Config[]
  UsersOnProject UsersOnProject[]
  UserAddRequest UserAddRequest[]
}

model Config {
  id     String @default(uuid())
  name   String
  values String // JSON string of env values

  // We must be related to a project
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  // Linked config
  linkedConfigId        String?
  linkedProjectConfigId String?
  linkedParent          Config?  @relation("ConfigLink", fields: [linkedConfigId, linkedProjectConfigId], references: [id, projectId], onDelete: Cascade)
  linkChild             Config[] @relation("ConfigLink")

  @@id([id, projectId])
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  authToken      String?
  accounts       Account[]
  sessions       Session[]
  UsersOnProject UsersOnProject[]
  UserAddRequest UserAddRequest[]

  @@unique([email, authToken])
}

model UsersOnProject {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  // If we delete a user need to check its not the last user for the config so dont cascade the delete
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@id([projectId, userId])
}

model UserAddRequest {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at        Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
